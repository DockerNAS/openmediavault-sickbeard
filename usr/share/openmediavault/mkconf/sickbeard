#!/bin/sh

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

repo="$(omv_config_get "//services/sickbeard/repo")"
branch="$(omv_config_get "//services/sickbeard/branch")"
newinstance="$(omv_config_get "//services/sickbeard/newinstance")"
newinstenable="$(omv_config_get "//services/sickbeard/newinstenable")"
ppass="$(omv_config_get "//services/sickbeard/ppass")"
ssl="$(omv_config_get "//services/sickbeard/ssl")"

RUN_AS="sickbeard"
APP_PATH="/opt/sickbeard"
DATA_DIR="/home/sickbeard/.sickbeard"
CONFIG="${DATA_DIR}/config.ini"
DATA_DIR2="/home/sickbeard/.sickbeard2"
CONFIG2="${DATA_DIR2}/config.ini"

if [ "${newinstenable}" = "1" ]; then
    /etc/init.d/sickbeard2 stop &>/dev/null
fi

switch_repo() {
    if [ -d $APP_PATH ]; then
        rm -Rf $APP_PATH
    fi

    if [ -d $DATA_DIR ]; then
        rm -Rf $DATA_DIR
    fi

    if [ -d $DATA_DIR2 ]; then
        rm -Rf $DATA_DIR2
    fi

    cd /
    sudo -u $RUN_AS git clone $repo -b $branch $APP_PATH
}

switch_branch() {
    cd $APP_PATH
    sudo -u $RUN_AS git reset --hard
    sudo -u $RUN_AS git checkout $branch
}

# If /opt/sickbeard does not exists
# must be first clone
if [ ! -d $APP_PATH ]; then
    switch_repo $repo $branch $APP_PATH $DATA_DIR $DATA_DIR2 $RUN_AS
fi

# If /opt/sickbeard exists and is not empty
# fetch current repo and branch
if [ -n "$(ls -A $APP_PATH)" ]; then
    cd $APP_PATH
    current_repo="$(git config --get remote.origin.url)"
    current_branch="$(git rev-parse --abbrev-ref HEAD)"

    if [ $repo != $current_repo ]; then
        switch_repo $repo $branch $APP_PATH $DATA_DIR $DATA_DIR2 $RUN_AS
    fi

    if [ $branch != $current_branch ]; then
        switch_branch $branch $APP_PATH $RUN_AS
    fi
else
   rm -Rf $APP_PATH
   switch_repo $repo $branch $APP_PATH $DATA_DIR $DATA_DIR2 $RUN_AS
fi

if [ "${newinstance}" = "1" ]; then
    if  [ ! -f /etc/init.d/sickbeard2 ]; then
        sudo -u $RUN_AS mkdir $DATA_DIR2
        cat <<EOF > /etc/init.d/sickbeard2
#! /bin/sh

### BEGIN INIT INFO
# Provides:          sb2
# Required-Start:    \$local_fs \$network \$remote_fs
# Required-Stop:     \$local_fs \$network \$remote_fs
# Should-Start:      \$NetworkManager
# Should-Stop:       \$NetworkManager
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts instance of Sb2
# Description:       starts instance of Sb2 using start-stop-daemon
### END INIT INFO

set -e

############### BEGIN EDIT ME ################
RUN_AS=sickbeard
RUN_GRP=users
APP_PATH=/opt/sickbeard
DAEMON=/usr/bin/python
PID_FILE=/var/run/sickbeard/sickbeard2.pid
PID_PATH=\$(dirname \$PID_FILE)
NAME=sickbeard
DESC=sickbeard
DATA_DIR=/home/sickbeard/.sickbeard2
EXTRA_DAEMON_OPTS=" --config=\${DATA_DIR}/config.ini"
DAEMON_OPTS=" \${APP_PATH}/SickBeard.py -q --daemon --nolaunch --pidfile=\${PID_FILE} --datadir=\${DATA_DIR} \${EXTRA_DAEMON_OPTS}"
############### END EDIT ME ##################

# Get lsb functions
. /lib/lsb/init-functions

# Create PID directory if not exist and ensure the Sickbeard user can write to it
if [ ! -d \$PID_PATH ]; then
    mkdir -p \$PID_PATH
    chown \$RUN_AS \$PID_PATH
fi

# Create DATA_DIR directory if not exist and ensure the Sickbeard user can write to it
if [ ! -d \$DATA_DIR ]; then
    mkdir -p \$DATA_DIR
    chown \$RUN_AS \$DATA_DIR
fi

if [ -e \$PID_FILE ]; then
    PID=`cat \$PID_FILE`
    if ! kill -0 \$PID > /dev/null 2>&1; then
        echo "Removing stale \$PID_FILE"
        rm \$PID_FILE
    fi
fi

if [ ! -f \$DATA_DIR/config.ini ]; then
    echo '[General]
launch_browser = 0
git_path = "/usr/bin/git"
port = 8082
host = 0.0.0.0
web_port = 8082
web_host = 0.0.0.0' > \$DATA_DIR/config.ini
    chown \$RUN_AS \$PID_PATH
    chown \$RUN_AS \$DATA_DIR/config.ini
    chmod 775 \$DATA_DIR/config.ini
fi

is_running() {
  if [ ! -e \$PID_FILE ]; then
    return 1
  fi
  return 0
}

start() {
  if ! is_running; then
    echo "Starting \$DESC"
    start-stop-daemon -d $APP_PATH -c $RUN_AS --start --pidfile $PID_FILE --exec $DAEMON -- $DAEMON_OPTS > /dev/null 2>&1
    #sudo -u \$RUN_AS \$DAEMON \$DAEMON_OPTS &> /dev/null 2>&1
  else
    echo "\$DESC is running"
  fi
}

stop() {
  if is_running; then
    echo "Stopping \$DESC"
    start-stop-daemon --stop --pidfile \$PID_FILE --retry 15
  fi
}

restart() {
  if is_running; then
    stop
  fi
  echo "Restarting \$DESC"
  start
}

case "\$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  status)
    status_of_proc -p \$PID_FILE "\$DAEMON" "\$NAME"
    ;;
  *)
    echo "Usage: \$0 {start|stop|restart|uninstall}"
esac
EOF
        chmod +x /etc/init.d/sickbeard2
        insserv -d sickbeard2
    fi
    if [ "${newinstenable}" = "1" ]; then
        update-rc.d sickbeard2 enable && /etc/init.d/sickbeard2 start 2>&1 &>/dev/null
    else
        /etc/init.d/sickbeard2 stop && update-rc.d sickbeard2 disable &>/dev/null
        if [ -f "/var/run/sickbeard/sickbeard2.pid" ]; then
            PID=$(cat /var/run/sickbeard/sickbeard2.pid);
            kill -0 $PID 2>/dev/null;

            if [ $? -eq 0 ]; then
                kill -9 $PID;
            fi
        fi
    fi
else
    if  [ -f "/etc/init.d/sickbeard2" ]; then
        /etc/init.d/sickbeard2 stop && update-rc.d sickbeard2 disable &>/dev/null
        if [ -f "/var/run/sickbeard/sickbeard2.pid" ]; then
            PID=$(cat /var/run/sickbeard/sickbeard2.pid);
            kill -0 $PID 2>/dev/null;

            if [ $? -eq 0 ]; then
                kill -9 $PID;
            fi
        fi

        rm -Rf $DATA_DIR2
        rm -Rf /etc/init.d/sickbeard2
    fi
fi

if [ "${ssl}" = "1" ]; then
    if [ ! -f "/home/sickbeard/Certificate.crt" ]; then
        CERTIFICATE_DIR=/home/sickbeard
        # Create the certificate files.
        xmlstarlet sel -t -m "//system/certificates/sslcertificate" \
          -v uuid -i "position() != last()" -n -b \
          ${OMV_CONFIG_FILE} | xmlstarlet unesc |
          while read uuid; do
                  crtfile="${CERTIFICATE_DIR}/Certificate.crt"
                  xmlstarlet sel -t -m "//system/certificates/sslcertificate[uuid='${uuid}']" \
                        -v certificate \
                        ${OMV_CONFIG_FILE} | xmlstarlet unesc > ${crtfile}
                  chmod 0640 ${crtfile}
                  chown sickbeard:users ${crtfile}

                  keyfile="${CERTIFICATE_DIR}/Private.key"
                  xmlstarlet sel -t -m "//system/certificates/sslcertificate[uuid='${uuid}']" \
                        -v privatekey \
                        ${OMV_CONFIG_FILE} | xmlstarlet unesc > ${keyfile}
                  chmod 0600 ${keyfile}
                  chown sickbeard:users ${keyfile}
          done
        #Enable
        if [ -f "$CONFIG" ]; then
            sed -i 's/^enable_https.*/enable_https = 1/' $CONFIG
            sed -i 's/^https_cert.*/https_cert = \/home\/sickbeard\/Certificate.crt/' $CONFIG
            sed -i 's/^https_key.*/https_key = \/home\/sickbeard\/Private.key/' $CONFIG
        fi
    fi
else
    if [ -f "/home/sickbeard/Certificate.crt" ]; then
        #Disable
        if [ -f "$CONFIG" ]; then
            sed -i 's/^enable_https.*/enable_https = 0/' $CONFIG
            sed -i 's/^https_cert.*/https_cert = server.crt/' $CONFIG
            sed -i 's/^https_key.*/https_key = server.key/' $CONFIG
        fi
        rm -Rf /home/sickbeard/Certificate.crt > /dev/null 2>&1
        rm -Rf /home/sickbeard/Private.key > /dev/null 2>&1
    fi
fi

if [ "${ppass}" = "1" ]; then
    cat <<EOF > /etc/nginx/openmediavault-webgui.d/sb.conf
location /sickbeard {
        proxy_pass        http://localhost:8081/sickbeard;
        proxy_set_header  Host localhost:8081;
        proxy_redirect    default;
}

EOF
    if [ -f "$CONFIG" ]; then
        sed -i 's/^web_root.*/web_root = "\/sickbeard"/' $CONFIG
    fi

    if [ "${newinstance}" = "1" ]; then
        cat <<EOF >> /etc/nginx/openmediavault-webgui.d/sb.conf
location /sickbeard2 {
        proxy_pass        http://localhost:8082/sickbeard2;
        proxy_set_header  Host localhost:8082;
        proxy_redirect    default;
}

EOF
        if [ -f "$CONFIG" ]; then
            sed -i 's/^web_root.*/web_root = "\/sickbeard2"/' $CONFIG2
        fi
    fi
    nginx -s reload
else
    rm -Rf /etc/nginx/openmediavault-webgui.d/sb.conf > /dev/null 2>&1
    if [ -f "$CONFIG" ]; then
        sed -i 's/^web_root.*/web_root = ""/' $CONFIG
    fi
    if [ "${newinstance}" = "1" ] && [ -f "$CONFIG2" ]; then
        sed -i 's/^web_root.*/web_root = ""/' $CONFIG2
    fi
    nginx -s reload
fi
exit